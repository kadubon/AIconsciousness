from typing import List, TypedDict, Annotated
from langchain_core.messages import AnyMessage
from langgraph.graph.message import add_messages

class AgentState(TypedDict):
    """
    Represents the state of our cognitive agent. This is the central "workspace"
    for all cognitive processes, inspired by the Global Workspace Theory.
    """
    
    # The history of the conversation, managed by a special reducer
    # that appends new messages to the list.
    messages: Annotated[List[AnyMessage], add_messages]
    
    # The current high-level task or input from the user.
    input: str
    
    # The execution plan generated by the agent's reasoning process.
    plan: str
    
    # A list to hold the outputs of any tools the agent uses.
    tool_outputs: list
    
    # Information retrieved from the agent's long-term memory.
    retrieved_memories: str
    
    # A counter to control loops and prevent infinite execution.
    iterations: int = 0

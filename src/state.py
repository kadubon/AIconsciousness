from typing import List
from langchain_core.messages import AnyMessage
from pydantic import BaseModel, Field

class AgentState(BaseModel):
    """
    Represents the comprehensive state of a cognitive agent within the Superorganism system.
    This model acts as the central 'workspace' for all cognitive processes, facilitating
    the Reason-Act-Observe loop and enabling persistent state management.
    
    Attributes:
        messages (List[AnyMessage]): A chronological history of the conversation, including
                                     human inputs, AI responses, and tool outputs.
        input (str): The current high-level task or direct input provided by the user.
        plan (str): The agent's current internal execution plan or thought process,
                    guiding its next actions.
        tool_outputs (List[AnyMessage]): A record of the outputs generated by tools invoked
                                        by the agent during its operation.
        retrieved_memories (str): Information or context retrieved from the agent's
                                  long-term memory, relevant to the current task.
        iterations (int): A counter to track the number of reasoning/action cycles,
                          useful for controlling loops and preventing infinite execution.
    """
    
    messages: List[AnyMessage] = Field(default_factory=list)
    input: str = ""
    plan: str = ""
    tool_outputs: List[AnyMessage] = Field(default_factory=list)
    retrieved_memories: str = ""
    iterations: int = 0